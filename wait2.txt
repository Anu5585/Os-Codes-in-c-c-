#include <stdio.h>

#include <stdlib.h>

#include <sys/types.h>

#include <sys/wait.h>

#include <unistd.h>

int main(void) {

pid_t pid = fork();

if(pid == 0) {

printf("Child => PPID: %d PID: %d\n", getppid(), getpid());

exit(EXIT_SUCCESS);

}

else if(pid > 0) {

printf("Parent => PID: %d\n", getpid());

printf("Waiting for child process to finish.\n");

wait(NULL);

printf("Child process finished.\n");

}

else {

printf("Unable to create child process.\n");

}

return EXIT_SUCCESS;

}







#include <stdio.h>

#include <unistd.h>

int main()

{

int id;

printf("Hello user!\n");

id = fork();

if (id > 0) {

/*parent process*/

printf("the parent section [Process id: %d].\n", getpid());

}

else if (id == 0) {

/*child process*/

printf(" the fork that is created [Process id: %d].\n", getpid());

printf("the fork that is parent process id: %d.\n", getppid());

}

else {

/*fork creation failed*/

printf("the fork that is failed!!\n");

}

return 0;

}

#include <stdio.h>

#include <unistd.h>

int main()

{

int id, i;

printf("Here the main function starts...\n");

id = fork();

if (id > 0) {

/*parent process*/

printf("this is parent section...\n");

}

else if (id == 0) {

/*child process*/

printf("\nfork is done...\n");

}

else {

/*fork creation failed*/

printf("\nhere creation of fork failed!!!\n");

}

printf("here we are printing the number from 1 to 10\n");

for (i = 1; i <= 10; i++)

printf("%d ", i);

printf("\n");

printf("here the main function starts...\n");

return 0;

}