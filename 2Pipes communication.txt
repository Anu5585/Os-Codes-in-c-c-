#include <iostream>
#include <unistd.h>
#include <string>

int main() {
    int pipe1[2]; // Pipe 1: Parent writes, Child reads
    int pipe2[2]; // Pipe 2: Child writes, Parent reads

    if (pipe(pipe1) == -1 || pipe(pipe2) == -1) {
        std::cerr << "Pipe creation failed." << std::endl;
        return 1;
    }

    pid_t pid = fork();

    if (pid == -1) {
        std::cerr << "Fork failed." << std::endl;
        return 1;
    }

    if (pid == 0) {
        // Child process
        close(pipe1[1]); // Close write end of pipe 1
        close(pipe2[0]); // Close read end of pipe 2

        // Read from pipe 1
        char buffer[256];
        read(pipe1[0], buffer, sizeof(buffer));
        std::cout << "Child received: " << buffer << std::endl;

        // Write to pipe 2
        std::string message = "Message from child";
        write(pipe2[1], message.c_str(), message.size());

        close(pipe1[0]);
        close(pipe2[1]);
    } else {
        // Parent process
        close(pipe1[0]); // Close read end of pipe 1
        close(pipe2[1]); // Close write end of pipe 2

        // Write to pipe 1
        std::string message = "Message from parent";
        write(pipe1[1], message.c_str(), message.size());

        // Read from pipe 2
        char buffer[256];
        read(pipe2[0], buffer, sizeof(buffer));
        std::cout << "Parent received: " << buffer << std::endl;

        close(pipe1[1]);
        close(pipe2[0]);
    }

    return 0;
}